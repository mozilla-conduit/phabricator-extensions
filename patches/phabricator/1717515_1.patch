diff --git a/src/applications/metamta/query/PhabricatorMetaMTAActor.php b/src/applications/metamta/query/PhabricatorMetaMTAActor.php
index cf2060a8f7..6e50a85269 100644
--- a/src/applications/metamta/query/PhabricatorMetaMTAActor.php
+++ b/src/applications/metamta/query/PhabricatorMetaMTAActor.php
@@ -4,6 +4,7 @@ final class PhabricatorMetaMTAActor extends Phobject {
 
   const STATUS_DELIVERABLE = 'deliverable';
   const STATUS_UNDELIVERABLE = 'undeliverable';
+  const STATUS_EXTERNALLY_DELIVERABLE = 'externally-deliverable';
 
   const REASON_NONE = 'none';
   const REASON_UNLOADABLE = 'unloadable';
@@ -22,6 +23,7 @@ final class PhabricatorMetaMTAActor extends Phobject {
   const REASON_ROUTE_AS_MAIL = 'route-as-mail';
   const REASON_UNVERIFIED = 'unverified';
   const REASON_MUTED = 'muted';
+  const REASON_MOZILLA_EMAILS = 'mozilla-emails';
 
   private $phid;
   private $emailAddress;
@@ -78,10 +80,25 @@ final class PhabricatorMetaMTAActor extends Phobject {
     return $this;
   }
 
+  public function setExternallyDeliverable($reason) {
+    $this->reasons[] = $reason;
+    $this->status = self::STATUS_EXTERNALLY_DELIVERABLE;
+  }
+
   public function isDeliverable() {
     return ($this->status === self::STATUS_DELIVERABLE);
   }
 
+  public function isDeliverableByAnyMail() {
+    /**
+     * Unlike isDeliverable(), which is `true` only if
+     * this actor is deliverable by the built-in mail system,
+     * this function returns `true` if the actor will be delivered
+     * email by any mail system (built-in OR Mozilla).
+     */
+    return ($this->status !== self::STATUS_UNDELIVERABLE);
+  }
+
   public function getDeliverabilityReasons() {
     return $this->reasons;
   }
diff --git a/src/applications/metamta/storage/PhabricatorMetaMTAMail.php b/src/applications/metamta/storage/PhabricatorMetaMTAMail.php
index cc3ae82bef..db85a030f8 100644
--- a/src/applications/metamta/storage/PhabricatorMetaMTAMail.php
+++ b/src/applications/metamta/storage/PhabricatorMetaMTAMail.php
@@ -831,7 +831,7 @@ final class PhabricatorMetaMTAMail
    */
   public function buildRecipientList() {
     $actors = $this->loadAllActors();
-    $actors = $this->filterDeliverableActors($actors);
+    $actors = $this->filterDeliverableByAnyMailActors($actors);
     return mpull($actors, 'getPHID');
   }
 
@@ -881,11 +881,11 @@ final class PhabricatorMetaMTAMail
     return array_keys($results);
   }
 
-  private function filterDeliverableActors(array $actors) {
+  private function filterDeliverableByAnyMailActors(array $actors) {
     assert_instances_of($actors, 'PhabricatorMetaMTAActor');
     $deliverable_actors = array();
     foreach ($actors as $phid => $actor) {
-      if ($actor->isDeliverable()) {
+      if ($actor->isDeliverableByAnyMail()) {
         $deliverable_actors[$phid] = $actor;
       }
     }
@@ -1038,12 +1038,16 @@ final class PhabricatorMetaMTAMail
       }
     }
 
-    // Exclude recipients who don't want any mail. This rule is very strong
+    // Apply recipients' mail settings. This rule is very strong
     // and runs last.
     foreach ($all_prefs as $phid => $prefs) {
-      $exclude = $prefs->getSettingValue(
+      $setting = $prefs->getSettingValue(
         PhabricatorEmailNotificationsSetting::SETTINGKEY);
-      if ($exclude) {
+
+      if ($setting == PhabricatorEmailNotificationsSetting::VALUE_MOZILLA_MAIL) {
+        $actors[$phid]->setExternallyDeliverable(
+          PhabricatorMetaMTAActor::REASON_MOZILLA_EMAILS);
+      } else if ($setting == PhabricatorEmailNotificationsSetting::VALUE_NO_MAIL) {
         $actors[$phid]->setUndeliverable(
           PhabricatorMetaMTAActor::REASON_MAIL_DISABLED);
       }
